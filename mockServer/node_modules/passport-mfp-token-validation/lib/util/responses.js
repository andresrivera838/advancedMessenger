/**
 *  Copyright 2016 IBM Corp. All Rights Reserved
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.  
 */

"use strict";

var loggerWrapper = require('./security-logger'),
util = require('util');

/**
 * @param reason String describing the reason for rejection.
 * @param info   JSON Object with extra information about the rejection.
 * @param code   should be invalid_request, invalid_token, insufficient_scope etc.
 * @param status The http response code - 200, 400, 401, 403 etc.
 * @param validationCode The validation code - AUTHORIZATION_SUCCESS, AUTHORIZATION_FAILED_MISSING_AUTH_HEADER etc.
 * @param scope  The required scope(s).
 */
function RejectionMessage(reason, info, code, status, validationCode, scope) {
    if (!(this instanceof RejectionMessage)) {
        var message = code?"RejectionMessage ["+code+"]: ":"RejectionMessage: ";
        message += reason;
        
        if (info !== null) {
            if (typeof info === 'object') {
                message += ", " + JSON.stringify(info);
            } else {
                message += ", " + info;
            }
        }
        loggerWrapper.getLogger().warn(message);
        return new RejectionMessage(reason, info, code, status, validationCode, scope);
    }

    this.reason = reason;
    this.info = info;
    this.code = code;
    this.status = status;
    this.validationCode = validationCode;
    this.scope = scope;
}

util.inherits(RejectionMessage, Error);

exports = module.exports = {
    RejectionMessage: RejectionMessage
}