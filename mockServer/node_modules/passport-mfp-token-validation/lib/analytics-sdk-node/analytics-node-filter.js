/**
 * @license
 * Licensed Materials - Property of IBM
 * 5725-I43 (C) Copyright IBM Corp. 2006, 2013. All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */
/*global module*/
function _init(app, path, options, analyticsSDK) {

    'use strict';
    var startTime = 0;
    var type = 'ServerNetworkTransactions';
    var TRACKING_ID = 'x-wl-analytics-tracking-id';
    var ANALYTICS_META = 'x-mfp-analytics-metadata';
    var HOST = 'host';
    var settings = options;
    var headers = {};
    var sdk = analyticsSDK;
    var analytics = null;

    var _isFunction = function(app) {

        if (typeof app !== "function" || app === null || !app) {
            return false;
        } else {
            return true;
        }

    };

    var _expressCallback = function(req, res, next) {
        startTime = new Date().getTime();
        next();
    };

    var _errorHandler = function(err) {
        console.log('Initialize the analytics instance failed.', err);
    };

    if (!_isFunction(app) || typeof path === "undefined" || path === null || typeof path !== "string") {
        return null;
    } else {
        app.use(path, _expressCallback);
    }

    var _urlDecodeAppStoreLabel = function(metadataHeaderString) {
        try {
                var indexOfAppStoreLabel = metadataHeaderString.indexOf('"appStoreLabel"');
                var indexOfColon = metadataHeaderString.indexOf(':', indexOfAppStoreLabel);
                var indexOfFirstQuote = metadataHeaderString.indexOf('"', indexOfColon);
                var indexOfSecondQuote = metadataHeaderString.indexOf('"', indexOfFirstQuote + 1);
                var appStoreLabel = metadataHeaderString.substring(indexOfFirstQuote + 1, indexOfSecondQuote);

                var result = metadataHeaderString.substring(0, indexOfAppStoreLabel).concat(
                    '"appStoreLabel":"',
                    decodeURI(appStoreLabel),
                    '"',
                    metadataHeaderString.substring(indexOfSecondQuote + 1, metadataHeaderString.length)
                );

                return result;
            }
            catch (e) {
                return metadataHeaderString;
            }
    };

    //TODO: decide if you wish to use IBMlogger or not

    return {

        sendReport: function sendReport() {
            var responseTime = new Date().getTime() - startTime;
            if (settings && settings.analytics && settings.analytics.onpremise) {
                var config = {
                    "url": options.analytics.onpremise.url,
                    "username": options.analytics.onpremise.user,
                    "password": options.analytics.onpremise.pass
                };
                analytics = sdk(type, _errorHandler, {
                    onpremise: config
                });
            } else {
                analytics = sdk(type, _errorHandler);
            }
            var event = {
                    trackingID: headers.trackingId,
                    roundTripTime: responseTime,
                    appStoreID : headers.appStoreID,
                    timestamp: startTime,
                    mfpAppName: headers.mfpAppName,
                    mfpAppVersion: headers.mfpAppVersion,
                    deviceOSversion: headers.deviceOSversion,
                    deviceID: headers.deviceID,
                    deviceModel: headers.deviceModel,
                    deviceOS: headers.deviceOS,
                    appStoreLabel : headers.appStoreLabel,
                    deviceBrand : headers.deviceBrand,
                    resourceURL: headers.path
            };

            try {
                analytics.reportEvent(type, event);
            } catch (error) {
                console.log('Sending analytics event error', event, error);
                throw error;
            }
        },

        setHeaders: function setHeaders(req) {
            var metadata;
            if(typeof req.headers[ANALYTICS_META] === 'object'){
                metadata = req.headers[ANALYTICS_META];
            } else {
                metadata = JSON.parse(_urlDecodeAppStoreLabel(req.headers[ANALYTICS_META]));
            }
            headers = {
                trackingId: req.headers[TRACKING_ID],
                mfpAppName: metadata && metadata.mfpAppName,
                mfpAppVersion: metadata && metadata.mfpAppVersion,
                deviceID: metadata && metadata.deviceID,
                deviceBrand : metadata && metadata.brand,
                deviceModel: metadata && metadata.model,
                deviceOS: metadata && metadata.os,
                deviceOSversion : metadata && metadata.osVersion,
                appStoreLabel : metadata && metadata.appStoreLabel,
                appStoreID : metadata && metadata.appStoreId,
                path: req && (req.protocol + '://' + req.headers[HOST] + req.originalUrl),

            };

            return headers;

        }

    };

}

module.exports = {
    init: _init
};