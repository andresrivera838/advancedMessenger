/**
 * @license
 * Licensed Materials - Property of IBM
 * 5725-I43 (C) Copyright IBM Corp. 2006, 2013. All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*globals module, require*/

var CONSTANTS = require('./constants.js');

// public for unit testing
// PUBLIC MODULE Validator contains functions which will validate analytics data
var Validator = (function() {
	'use strict';

	var validationCodes = ['TOKEN_FAILED_MISSING_PARAMETER', 'TOKEN_FAILED_UNSUPPORTED_GRANT_TYPE', 'TOKEN_FAILED_UNKNOWN_CLIENT', 'TOKEN_FAILED_INVALID_GRANT', 'TOKEN_FAILED_INVALID_REDIRECT_URI', 'TOKEN_FAILED_INTERNAL_SERVER_ERROR', 'TOKEN_FAILED_MISSING_AUTH_HEADER', 'TOKEN_FAILED_INVALID_AUTH_HEADER', 'TOKEN_FAILED_INVALID_CREDENTIALS', 'TOKEN_FAILED_REQUEST_EXPIRED', 'TOKEN_FAILED_UNTRUSTED_AUTH_HEADER', 'TOKEN_FAILED_UNRECOGNIZED_CLIENT_ID', 'TOKEN_FAILED_INVALID_CERTIFICATE_FORMAT', 'TOKEN_FAILED_UNABLE_TO_DETERMINE_SCOPE', 'TOKEN_FAILED_UNKNOWN_SECURITY_TEST', 'TOKEN_ISSUED', 'AUTHORIZATION_FAILED_MISSING_PARAMETER', 'AUTHORIZATION_FAILED_MISSING_AUTH_HEADER', 'AUTHORIZATION_FAILED_MISSING_TOKEN', 'AUTHORIZATION_FAILED_UNKNOWN_CLIENT', 'AUTHORIZATION_FAILED_INVALID_REDIRECT_URI', 'AUTHORIZATION_FAILED_UNSUPPORTED_RESPONSE_TYPE', 'AUTHORIZATION_FAILED_INTERNAL_SERVER_ERROR', 'AUTHORIZATION_FAILED_INVALID_ACCESS_TOKEN', 'AUTHORIZATION_FAILED_INVALID_ID_TOKEN', 'AUTHORIZATION_FAILED_INVALID_CREDENTIALS', 'AUTHORIZATION_FAILED_CLIENT_INTERACTION_REQUIRED', 'AUTHORIZATION_FAILED_INSUFFICIENT_SCOPE', 'AUTHORIZATION_PENDING', 'AUTHORIZATION_FAILED', 'AUTHORIZATION_SUCCESS', 'REGISTRATION_FAILED', 'REGISTRATION_FAILED_CLIENT_ALREADY_EXISTS', 'REGISTRATION_SUCCESS'];

	var validator = {};

	validator.isString = function(arg) { return (typeof arg === 'string'); };

	validator.isNumber = function(arg) { return (typeof arg === 'number'); };

	validator.isBoolean = function(arg) { return (typeof arg === 'boolean'); };

	validator.isDate = function(arg) { return (validator.isNumber(arg) && !isNaN(new Date(arg).getTime())); };

	validator.isObject = function(arg) { return (typeof arg === 'object'); };

	validator.isIpAddress = function(arg) {
		if (!validator.isString(arg)) { return false; }

		var ipv4Pattern = /^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$/i;
		var ipv6Pattern = /^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$/i;
		var ipv6CompressedPattern = /^((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)::((?:[0-9A-Fa-f]{1,4}(?::[0-9A-Fa-f]{1,4})*)?)$/i;

		return ipv4Pattern.test(arg) || ipv6Pattern.test(arg) || ipv6CompressedPattern.test(arg);
	};

	validator.isHostname = function(arg) {
		if (!validator.isString(arg)) { return false; }

		var hostname = /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.)?)+([a-zA-Z]{2,6})?$/i;
		return hostname.test(arg);
	};

	validator.isValidationCode = function(arg) {
		return (validationCodes.indexOf(arg) >= 0);
	};

	validator.isArray = function(arg) {
		return Array.isArray(arg);
	};

	validator.isFunction = function(arg){
		var getType = {};
		return arg && getType.toString.call(arg) === '[object Function]';
	};
	return validator;
}());

// a list of valid properties for a given event type
var eventProperties = {
	AnalyticsConfiguration: [], // empty as it is dynamically populated
	CustomChart: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyCreatorUserID, CONSTANTS.keyTitle, CONSTANTS.keyFlowDestination, CONSTANTS.keyFlowSource, CONSTANTS.keyMetrics, CONSTANTS.keyChartProperties, CONSTANTS.keyCustomEventType, CONSTANTS.keyCustomChartType, CONSTANTS.keyCustomXAxis, CONSTANTS.keyCustomYAxis, CONSTANTS.keyTerm, CONSTANTS.keyFilters, CONSTANTS.keyTableColumns],
	CustomData: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyServerIpAddress, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppID, CONSTANTS.keyAppVersionCode],
	AppLog: [CONSTANTS.keyLoggerName, CONSTANTS.keySourceClass, CONSTANTS.keyStacktraceMessage, CONSTANTS.keyThreadID, CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyLevel, CONSTANTS.keyPkg, CONSTANTS.keyMessage, CONSTANTS.keyStacktrace, CONSTANTS.keyMethod, CONSTANTS.keyFile, CONSTANTS.keyLine, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppID, CONSTANTS.keyAppVersionCode],
	AppPushAction: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyNotificationID, CONSTANTS.keyNotificationAction, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppID, CONSTANTS.keyAppVersionCode],
	Device: [CONSTANTS.keyLastAccessTimestamp, CONSTANTS.keyApps, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceBrand, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyFirstAccessTimestamp,],
	User: [CONSTANTS.keyLastAccessTimestamp, CONSTANTS.keyFirstAccessTimestamp, CONSTANTS.keyUserID, CONSTANTS.keyDeviceApps],
	ServerLog: [CONSTANTS.keyMethod, CONSTANTS.keyFile, CONSTANTS.keyLine, CONSTANTS.keyPkg, CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyTrackingID, CONSTANTS.keyLevel, CONSTANTS.keyLoggerName, CONSTANTS.keyThreadID, CONSTANTS.keyMessage, CONSTANTS.keySourceClass, CONSTANTS.keyStacktrace, CONSTANTS.keyStacktraceMessage, CONSTANTS.keyServerIpAddress],
	NetworkTransaction: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keySessionID, CONSTANTS.keyTrackingID, CONSTANTS.keyUserAgent, CONSTANTS.keyBytesSent, CONSTANTS.keyBytesReceived, CONSTANTS.keyServerProcessingTime, CONSTANTS.keyBackendProcessingTime, CONSTANTS.keyServerIpAddress, CONSTANTS.keyAdapterName, CONSTANTS.keyProcedureName, CONSTANTS.keyAuthSuccess, CONSTANTS.keyValidationCode, CONSTANTS.keyRealmName, CONSTANTS.keyLoginModule, CONSTANTS.keyLoginModuleName, CONSTANTS.keyAuthenticator, CONSTANTS.keyResourceURL, CONSTANTS.keyRoundTripTime, CONSTANTS.keyBytesSent, CONSTANTS.keyBytesReceived, CONSTANTS.keyResponseCode, CONSTANTS.inboundTimestamp, CONSTANTS.outboundTimestamp, CONSTANTS.keyRequestMethod, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppID, CONSTANTS.keyAppVersion, CONSTANTS.keyAppVersionCode],
	PushNotification: [CONSTANTS.keyAppVersionCode, CONSTANTS.keyAppID, CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyTag, CONSTANTS.keyNotificationCountIOS, CONSTANTS.keyNotificationCountAndroid, CONSTANTS.keyNotificationCountWindows, CONSTANTS.keyNotificationID, CONSTANTS.keyMessageText, CONSTANTS.keyProduction, CONSTANTS.keyDestNumber, CONSTANTS.keyEventSource, CONSTANTS.keySubscriptionProperties, CONSTANTS.keyMediator, CONSTANTS.keyMessageCount, CONSTANTS.keyServerIpAddress, CONSTANTS.keyCreatorUserID, CONSTANTS.keyNotificationCountWindowsPhone8],
	PushSubscription: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppID, CONSTANTS.keyAppVersionCode, CONSTANTS.keyServerIpAddress, CONSTANTS.keySubscribeTags, CONSTANTS.keyUnsubscribeTags, CONSTANTS.keyTrackingID],
	AppSession: [CONSTANTS.keyTimezone, CONSTANTS.keyAppSessionID, CONSTANTS.keyClosedBy, CONSTANTS.keyStacktrace, CONSTANTS.keyCrashMessage, CONSTANTS.keyDuration, CONSTANTS.keyTimestamp, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppEvents, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppID, CONSTANTS.keyAppVersionCode],
	AppPushActionSummarizedHourly: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppVersionCode, CONSTANTS.keyAppID, CONSTANTS.keyNotificationAction, CONSTANTS.keyCount],
	AppSessionSummarizedHourly: [CONSTANTS.keyTimestamp, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppVersionCode, CONSTANTS.keyAppID, CONSTANTS.keyCount, CONSTANTS.keyUniqueIDs, CONSTANTS.keyClosedBy, CONSTANTS.keyDurationCount, CONSTANTS.keyDuration],
	NetworkTransactionSummarizedHourly: [CONSTANTS.keyTimestamp, CONSTANTS.keyDeviceModel, CONSTANTS.keyRequestMethod, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppVersionCode, CONSTANTS.keyAppID, CONSTANTS.keyUserAgent, CONSTANTS.keyResourceURL, CONSTANTS.keyServerIpAddresses, CONSTANTS.keyBytesSentCount, CONSTANTS.keyRoundTripTime, CONSTANTS.keyRoundTripTimeCount, CONSTANTS.keyBytesSent, CONSTANTS.keyBytesReceived, CONSTANTS.keyBytesReceivedCount, CONSTANTS.keyServerProcessingTime, CONSTANTS.keyServerProcessingTimeCount, CONSTANTS.keyBackendProcessingTime, CONSTANTS.keyBackendProcessingTimeCount, CONSTANTS.keyAdapterName, CONSTANTS.keyCount, CONSTANTS.keyProcedureName, CONSTANTS.keyDeviceBrand],
	PushSubscriptionSummarizedHourly: [CONSTANTS.keyTimestamp, CONSTANTS.keyTimezone, CONSTANTS.keyDeviceID, CONSTANTS.keyDeviceModel, CONSTANTS.keyDeviceOS, CONSTANTS.keyDeviceOSVersion, CONSTANTS.keyDeviceBrand, CONSTANTS.keyAppName, CONSTANTS.keyAppVersion, CONSTANTS.keyAppID, CONSTANTS.keySubscribeTags, CONSTANTS.keyUnsubscribeTags, CONSTANTS.keyCount, CONSTANTS.keyAppVersionCode, CONSTANTS.keyServerIpAddress]
};
// types for all of the properties used
var eventPropertyTypeValidator = {};
(function() {
	'use strict';
	eventPropertyTypeValidator[CONSTANTS.keySubscribeTags] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyUnsubscribeTags] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAppID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAppVersionCode] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTimezone] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyCreatorUserID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTitle] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyFlowDestination] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyFlowSource] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMetrics] = function(obj) { return Validator.isObject(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyChartProperties] = function(obj) { return Validator.isObject(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyCustomEventType] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyCustomChartType] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyCustomXAxis] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyCustomYAxis] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTerm] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyFilters] = function(obj) { return Validator.isObject(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTableColumns] = function(obj) { return Validator.isObject(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDeviceID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDeviceModel] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDeviceBrand] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDeviceOS] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDeviceOSVersion] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAppName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAppVersion] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyServerIpAddress] = function(obj) { return Validator.isIpAddress(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLevel] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyPkg] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMessage] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyStacktrace] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyStacktraceMessage] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMethod] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyFile] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLine] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTrackingID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyResourceURL] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyUserAgent] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyRoundTripTime] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyOutboundTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyInboundTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyBytesSent] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyBytesReceived] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationAction] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyFirstAccessTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLastAccessTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keySessionID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keySourceMethodName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLoggerName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyThreadID] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keySourceClass] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyInboundTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyOutboundTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyServerProcessingTime] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyBackendProcessingTime] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAdapterName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyProcedureName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyTag] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationCountIOS] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationCountAndroid] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationCountWeb] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationCountWindows] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyNotificationCountWindowsPhone8] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMessagePushTimestamp] = function(obj) { return Validator.isDate(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMessageText] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyProduction] = function(obj) { return Validator.isBoolean(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDestNumber] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keySenderID] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyEventSource] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keySubscriptionProperties] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMediator] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyMessageCount] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAuthSuccess] = function(obj) { return Validator.isBoolean(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyValidationCode] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyRealmName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLoginModule] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyLoginModuleName] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAuthenticator] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyResponseCode] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDuration] = function(obj) { return Validator.isNumber(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyClosedBy] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyApps] = function(obj) { return Validator.isObject(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyDatabase] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyType] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyAction] = function(obj) { return Validator.isString(obj); };
	eventPropertyTypeValidator[CONSTANTS.keyRequestMethod] = function(obj) { return Validator.isString(obj); };
}());


// PUBLIC FUNCTION isValid returns true if event is a valid instance of eventType; returns false and emitts error otherwise
var _isValid = function(eventType, event, emitter) {
	'use strict';
	var eventProps = Object.keys(event);

	// empty events will be rejected
	if (eventProps.length === 0) {
		return false;
	}

	// check the event type
	var actualProps = eventProperties[eventType];
	if (typeof actualProps === 'undefined') {
		emitter.emit('error', eventType + ' is not a known event type.');
		return false;
	}

	// checks the number of properties
	if (eventProps.length > actualProps.length) {
        emitter.emit('error', 'An event has more properties than its type, ' + eventType +
        '. Event properties: [' + eventProps + ']. ' + eventType + ' properties: [' + actualProps + '].');
        return false;
    }

	var valid = true;

	// check the keys of the event
	Object.keys(event).forEach(function(key) {
		if (actualProps.indexOf(key) < 0) {
			emitter.emit('error', 'An event has property "' + key + '" which is not in its type, ' + eventType +
            '. Event properties: [' + Object.keys(event) + ']. ' + eventType + ' properties: [' + actualProps + '].');
			valid = false;
			return;
		}

    if(!eventPropertyTypeValidator[key]){
			emitter.emit('error', 'Missing definition for Property: ' + key + ' in eventPropertyTypeValidator.');
			valid = false;
			return;
    }

    if(!event[key] && (typeof(event[key]) === "undefined")){
			emitter.emit('error', 'Missing required property: ' + key + ' in the event: ' + event);
			valid = false;
			return;
    }
		if (!eventPropertyTypeValidator[key](event[key])) {
			emitter.emit('error', key + ' of ' + eventType + ' is of an incorrect type.');
			valid = false;
			return;
		}
	});

	return valid;
};

// PUBLIC FUNCTION getMappings returns the event mappings and their corresponding properties
var _getMappings = function() {
	'use strict';
	return eventProperties;
};

module.exports = {
	Validator: Validator, // public for unit testing
	getMappings: _getMappings,
	isValid: _isValid
};
