/**
 * @license
 * Licensed Materials - Property of IBM
 * 5725-I43 (C) Copyright IBM Corp. 2006, 2013. All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */
/*global require, module*/
function _setupBlueMixMode(emitter, logger, utils, https, url, process) {

    'use strict';

    var CONSTANTS = require('./constants');

    logger.logEnter('setupBlueMixMode');

    // Get info about the logging service.
    if (!process.env.VCAP_SERVICES || process.env.VCAP_SERVICES === 'null') {
        emitter.emit('error', 'VCAP_SERVICES is not defined.');
        return null;
    }

    var esCredentials, // Used when SDK is running in elasticsearch mode.
        esIndexNamePathPrefix, // prefixed to all elasticsearch requests, b/c they must take place in the context of an index.
        esIndexName, // name of the elasticsearch index extracted from the credentials url.
        vcapServices = JSON.parse(process.env.VCAP_SERVICES);

    // Cycle through all bound services and look for elasticsearch.
    for (var key in vcapServices) {
        if (vcapServices.hasOwnProperty(key)) {

            var fullInfo;

            if (key.indexOf('AESearch') === 0) {

                // If we are bound to the analytics elastic search service,
                // the SDK will be running in elasticsearch mode.
                logger.log('Bound to Analytics Elasticsearch service.  SDK will use Elasticsearch.');

                fullInfo = vcapServices[key][0];

                if (fullInfo.credentials) {
                    esCredentials = fullInfo.credentials;
                }
            }
        }
    }

    if (esCredentials) {

        url = url.parse(esCredentials.url);
        esIndexNamePathPrefix = url.path;
        esIndexName = url.path.substring(url.path.lastIndexOf('/') + 1);

    } else {
        // Not in elasticsearch mode, so we are required to have elastic search credentials.
        emitter.emit('error', 'No AESearch service credentials were found in VCAP_SERVICES: ' + process.env.VCAP_SERVICES);
        return null;
    }

    // Find our domain name.
    if (!process.env.VCAP_APPLICATION || process.env.VCAP_APPLICATION === 'null') {
        emitter.emit('error', 'VCAP_APPLICATION is not defined.');
        return null;
    }

    var domain,
        vcapApp = JSON.parse(process.env.VCAP_APPLICATION);

    if (vcapApp.uris && vcapApp.uris.length) {
        var uri = vcapApp.uris[0],
            dotIndex = uri.indexOf('.');

        if (dotIndex > 0) {
            domain = uri.substring(dotIndex);
        }
    }

    if (!domain) {
        emitter.emit('error', 'No uris were found in VCAP_APPLICATION: ' + process.env.VCAP_APPLICATION);
        return null;
    }

    // The route to the UDG depends on where we're running, and it never
    // includes a subzone.
    var udgHostname;

    if (domain === '.ng.bluemix.net') {
        udgHostname = 'meteringinterface-provider.ng.bluemix.net';
    } else {
        udgHostname = 'usagedatagateway.stage1.ng.bluemix.net';
        if (process.env.SUB_ZONE) {
            // This is necessary for test apps, which won't have the subzone in
            // their domain.  Use lower case to match the certificates.
            domain = '.stage1-' + process.env.SUB_ZONE.toLowerCase() + '.ng.bluemix.net';
        }
    }

    logger.log('domain ' + domain);
    logger.log('udgHostname ' + udgHostname);
    logger.logExit('setupBlueMixMode');

    // Create the environment object.
    return {

        billingInterval: 10 * 60 * 1000, // 10 minutes

        name: CONSTANTS.bluemix,

        billingOptions: function billingOptions(method, path) {

            var options = {
                method: method,
                path: path,
                hostname: udgHostname,
                auth: 'mbaasSBrokerAdmin:d8AmHr$aUe7E30DX%kunZc'
            };

            logger.log('billingOptions: ' + JSON.stringify(options));

            return options;
        },

        get: https.get,

        request: https.request,

        loadValidator: function() {
            var EventReportValidator = require('./EventReportValidator.js');
            return EventReportValidator;
        },

        elasticsearchOptions: function elasticsearchOptions(method, path) {

            var options = {
                method: method,
                path: esIndexNamePathPrefix + path,
                hostname: url.hostname,
                port: url.port,
                auth: esCredentials.userid + ':' + esCredentials.password
            };

            logger.log('elasticsearchOptions: ' + JSON.stringify(options));

            return options;
        },

        serviceBrokerOptions: function serviceBrokerOptions(method, path) {

            var options = {
                method: method,
                path: path,
                hostname: 'mbaasbroker' + domain,
                auth: 'mbaasAdmin:d8AmHrsFze7E30DX%kunZc'
            };

            logger.log('serviceBrokerOptions: ' + JSON.stringify(options));

            return options;
        }
    };
}

module.exports = {
    setupBlueMixMode: _setupBlueMixMode
};